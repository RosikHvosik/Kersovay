#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QTableWidget>
#include <QDebug>
#include <QHeaderView>
#include <QFileDialog>
#include <QMessageBox>
#include <QTextStream>
#include <QInputDialog>
#include <QStringList>
#include <QDialog>
#include <QVBoxLayout>
#include <QTextEdit>
#include <QPushButton>
#include <QFont>
#include <QGraphicsEllipseItem>
#include <QGraphicsTextItem>
#include <QGraphicsLineItem>
#include <QGraphicsSceneMouseEvent>
#include <QToolTip>
#include <QApplication>
#include <QObject>
#include <algorithm>
#include <cctype>
#include <cmath>
#include <climits>
#include <map>
#include <functional>
#include <QLabel>
#include "array.h"
#include "hashtable.hpp"
#include "avltree3.hpp"
#include "types.h"



extern Array<Patient, 1000> PatientArray;
extern Array<Appointment, 1000> AppointmentArray;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ MainWindow –∏–∑ DateTreeNodeItem
static MainWindow* g_mainWindow = nullptr;

class DateTreeNodeItem : public QGraphicsEllipseItem
{
public:
    DateTreeNodeItem(const QString& dateDisplay, const QString& dateKey,
                     const std::vector<std::size_t>& indices,
                     HashTable* hashTable, qreal x, qreal y, qreal width = 140, qreal height = 70)
        : QGraphicsEllipseItem(x - width/2, y - height/2, width, height)
        , m_dateDisplay(dateDisplay), m_dateKey(dateKey), m_indices(indices), m_hashTable(hashTable)
    {
        // –¶–≤–µ—Ç —É–∑–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—ë–º–æ–≤
        QColor nodeColor;
        if (indices.size() == 1) {
            nodeColor = QColor(144, 238, 144);      // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        } else if (indices.size() <= 3) {
            nodeColor = QColor(173, 216, 230);      // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        } else if (indices.size() <= 5) {
            nodeColor = QColor(255, 218, 185);      // –ü–µ—Ä—Å–∏–∫–æ–≤—ã–π
        } else {
            nodeColor = QColor(255, 182, 193);      // –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
        }

        setBrush(QBrush(nodeColor));
        setPen(QPen(QColor(70, 130, 180), 2));
        setFlag(QGraphicsItem::ItemIsSelectable, true);
        setAcceptHoverEvents(true);

        QString nodeText = QString("%1\n(%2 –ø—Ä–∏—ë–º–æ–≤)")
                               .arg(dateDisplay)
                               .arg(indices.size());
        m_textItem = new QGraphicsTextItem(nodeText, this);

        QRectF textRect = m_textItem->boundingRect();
        m_textItem->setPos(-textRect.width()/2, -textRect.height()/2);
        m_textItem->setDefaultTextColor(QColor(0, 0, 139));

        QFont font = m_textItem->font();
        font.setBold(true);
        font.setPointSize(8);
        m_textItem->setFont(font);

        updateTooltip();
    }

    void updateTooltip() {
        QString tooltip = QString("üóìÔ∏è –î–ê–¢–ê: %1\n").arg(m_dateDisplay);
        tooltip += QString(" –ö–ª—é—á: %1\n").arg(m_dateKey);
        tooltip += QString(" –ü—Ä–∏—ë–º–æ–≤: %2\n").arg(m_indices.size());
        tooltip += QString(" –ò–Ω–¥–µ–∫—Å—ã: [");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å–æ–≤
        for (size_t i = 0; i < m_indices.size() && i < 10; ++i) {
            if (i > 0) tooltip += ", ";
            tooltip += QString::number(m_indices[i]);
        }
        if (m_indices.size() > 10) {
            tooltip += QString(", ... –µ—â—ë %1").arg(m_indices.size() - 10);
        }
        tooltip += "]\n\n";

        tooltip += "üè• –ü–†–ò–Å–ú–´:\n";
        for (size_t i = 0; i < m_indices.size() && i < 7; ++i) {
            std::size_t idx = m_indices[i];
            if (idx < AppointmentArray.Size()) {
                const Appointment& app = AppointmentArray[idx];

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                QString policy = "–ù–ï–¢_–ü–û–õ–ò–°–ê";
                if (g_mainWindow && idx < g_mainWindow->appointmentPolicies.size()) {
                    policy = QString::fromStdString(g_mainWindow->appointmentPolicies[idx]);

                    // –°–æ–∫—Ä–∞—â–∞–µ–º –ø–æ–ª–∏—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if (policy.length() > 8) {
                        policy = "..." + policy.right(4);
                    }
                }

                tooltip += QString("%1. [%2] %3 ‚Üí %4 (–ø–æ–ª–∏—Å: %5)\n")
                               .arg(i + 1)
                               .arg(idx)
                               .arg(QString::fromStdString(app.doctorType))
                               .arg(QString::fromStdString(app.diagnosis))
                               .arg(policy);
            } else {
                tooltip += QString("%1. [%2]  –û–®–ò–ë–ö–ê: –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –º–∞—Å—Å–∏–≤–∞!\n")
                               .arg(i + 1).arg(idx);
            }
        }

        if (m_indices.size() > 7) {
            tooltip += QString("... –∏ –µ—â—ë %1 –ø—Ä–∏—ë–º–æ–≤").arg(m_indices.size() - 7);
        }

        setToolTip(tooltip);
    }

protected:
    void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
        if (event->button() == Qt::LeftButton) {
            // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            QString details = QString("Ô∏è –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–¢–ï %1\n\n").arg(m_dateDisplay);
            details += QString("–ö–ª—é—á –≤ –¥–µ—Ä–µ–≤–µ: %1\n").arg(m_dateKey);
            details += QString("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤: %1\n").arg(m_indices.size());
            details += QString("–í—Å–µ –∏–Ω–¥–µ–∫—Å—ã: [");

            for (size_t i = 0; i < m_indices.size(); ++i) {
                if (i > 0) details += ", ";
                details += QString::number(m_indices[i]);
            }
            details += "]\n\n";

            details += "–í–°–ï –ü–†–ò–Å–ú–´ –ù–ê –≠–¢–£ –î–ê–¢–£:\n";
            details += QString(80, '=') + "\n";


            for (size_t i = 0; i < m_indices.size(); ++i) {
                std::size_t idx = m_indices[i];
                details += QString("\n%1. –ü–†–ò–Å–ú [–∏–Ω–¥–µ–∫—Å %2]:\n").arg(i + 1).arg(idx);

                if (idx < AppointmentArray.Size()) {
                    const Appointment& app = AppointmentArray[idx];

                    details += QString(" –í—Ä–∞—á: %1\n").arg(QString::fromStdString(app.doctorType));
                    details += QString(" –î–∏–∞–≥–Ω–æ–∑: %1\n").arg(QString::fromStdString(app.diagnosis));
                    details += QString(" –î–∞—Ç–∞: %1.%2.%3\n")
                                   .arg(app.appointmentDate.day, 2, 10, QChar('0'))
                                   .arg(static_cast<int>(app.appointmentDate.month), 2, 10, QChar('0'))
                                   .arg(app.appointmentDate.year);

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–æ–ª–∏—Å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    if (g_mainWindow && idx < g_mainWindow->appointmentPolicies.size()) {
                        QString policy = QString::fromStdString(g_mainWindow->appointmentPolicies[idx]);
                        details += QString("–ü–æ–ª–∏—Å –û–ú–°: %1\n").arg(policy);

                        // –ò—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
                        if (m_hashTable) {
                            const Patient* patient = m_hashTable->get(policy.toStdString());
                            if (patient) {
                                details += QString("   üë§ –ü–∞—Ü–∏–µ–Ω—Ç: %1 %2 %3\n")
                                               .arg(QString::fromStdString(patient->surname))
                                               .arg(QString::fromStdString(patient->name))
                                               .arg(QString::fromStdString(patient->middlename));
                            } else {
                                details += "   –ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ!\n";
                            }
                        }
                    } else {
                        details += "   –ü–æ–ª–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö!\n";
                    }
                } else {
                    details += "    –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏—ë–º–æ–≤!\n";
                }

                details += QString(40, '-')
 + "\n";
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
            QDialog* dialog = new QDialog();
            dialog->setWindowTitle(QString("–£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç: %1").arg(m_dateDisplay));
            dialog->resize(700, 500);

            QVBoxLayout* layout = new QVBoxLayout(dialog);
            QTextEdit* textEdit = new QTextEdit(dialog);
            textEdit->setPlainText(details);
            textEdit->setReadOnly(true);
            textEdit->setFont(QFont("Courier", 9));

            QPushButton* closeBtn = new QPushButton("–ó–∞–∫—Ä—ã—Ç—å", dialog);
            QObject::connect(closeBtn, &QPushButton::clicked, dialog, &QDialog::accept);

            layout->addWidget(textEdit);
            layout->addWidget(closeBtn);

            dialog->exec();
            dialog->deleteLater();
        }
        QGraphicsEllipseItem::mousePressEvent(event);
    }

    void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
        setBrush(QBrush(QColor(255, 223, 186)));
        setPen(QPen(QColor(255, 140, 0), 3));

        // –û–±–Ω–æ–≤–ª—è–µ–º tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        updateTooltip();

        QGraphicsEllipseItem::hoverEnterEvent(event);
    }

    void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
        QColor nodeColor;
        if (m_indices.size() == 1) {
            nodeColor = QColor(144, 238, 144);
        } else if (m_indices.size() <= 3) {
            nodeColor = QColor(173, 216, 230);
        } else if (m_indices.size() <= 5) {
            nodeColor = QColor(255, 218, 185);
        } else {
            nodeColor = QColor(255, 182, 193);
        }
        setBrush(QBrush(nodeColor));
        setPen(QPen(QColor(70, 130, 180), 2));
        QGraphicsEllipseItem::hoverLeaveEvent(event);
    }

private:
    QString m_dateDisplay;
    QString m_dateKey;
    std::vector<std::size_t> m_indices;
    HashTable* m_hashTable;
    QGraphicsTextItem* m_textItem;
};
// –í mainwindow.cpp –∑–∞–º–µ–Ω–∏—Ç–µ –∫–ª–∞—Å—Å TreeNodeItem –Ω–∞ —ç—Ç–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π:
bool isValidStringField(const std::string& input) {
    if (input.length() < 2)
        return false;

    for (char c : input) {
        if (!std::isalpha(static_cast<unsigned char>(c)))
            return false;
    }

    return true;
}
// –í mainwindow.cpp –∑–∞–º–µ–Ω–∏—Ç–µ –∫–ª–∞—Å—Å TreeNodeItem –Ω–∞ —ç—Ç–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π:
bool isValidDate(const Date& date) {
    int maxDays = 31;

    switch (date.month) {
    case Month::–∞–ø—Ä:
    case Month::–∏—é–Ω:
    case Month::—Å–µ–Ω:
    case Month::–Ω–æ—è:
        maxDays = 30;
        break;
    case Month::—Ñ–µ–≤:
        maxDays = 29; // –±–µ–∑ –≤–∏—Å–æ–∫–æ—Å–Ω—ã—Ö –≥–æ–¥–æ–≤
        break;
    default:
        maxDays = 31;
    }

    return date.day >= 1 && date.day <= maxDays &&
           date.year >= 1900 && date.year <= 2100;
}
class TreeNodeItem : public QGraphicsEllipseItem
{
public:
    TreeNodeItem(const QString& key, const std::vector<std::size_t>& indices,
                 HashTable* hashTable, qreal x, qreal y, qreal width = 100, qreal height = 50)
        : QGraphicsEllipseItem(x - width/2, y - height/2, width, height)
        , m_key(key), m_indices(indices), m_hashTable(hashTable)
    {
        QColor nodeColor;
        if (indices.size() == 1) {
            nodeColor = QColor(144, 238, 144);
        } else if (indices.size() <= 3) {
            nodeColor = QColor(173, 216, 230);
        } else {
            nodeColor = QColor(255, 182, 193);
        }

        setBrush(QBrush(nodeColor));
        setPen(QPen(QColor(70, 130, 180), 2));
        setFlag(QGraphicsItem::ItemIsSelectable, true);
        setFlag(QGraphicsItem::ItemIsFocusable, true);
        setAcceptHoverEvents(true);

        QString displayKey = key;
        if (displayKey.length() > 12) {
            displayKey = displayKey.left(4) + "..." + displayKey.right(4);
        }

        QString nodeText = QString("%1\n(%2)").arg(displayKey).arg(indices.size());
        m_textItem = new QGraphicsTextItem(nodeText, this);

        QRectF textRect = m_textItem->boundingRect();
        m_textItem->setPos(-textRect.width()/2, -textRect.height()/2);
        m_textItem->setDefaultTextColor(QColor(0, 0, 139));

        QFont font = m_textItem->font();
        font.setBold(true);
        font.setPointSize(8);
        m_textItem->setFont(font);

        updateTooltip();
    }

    void updateTooltip() {
        QString tooltip = QString("–ü–æ–ª–∏—Å: %1\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤: %2\n\n–ü—Ä–∏—ë–º—ã:\n")
                              .arg(m_key).arg(m_indices.size());

        if (m_hashTable) {
            const Patient* patient = m_hashTable->get(m_key.toStdString());
            if (patient) {
                tooltip += QString("–ü–∞—Ü–∏–µ–Ω—Ç: %1 %2 %3\n")
                               .arg(QString::fromStdString(patient->surname))
                               .arg(QString::fromStdString(patient->name))
                               .arg(QString::fromStdString(patient->middlename));
                tooltip += QString("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: %1.%2.%3\n\n")
                               .arg(patient->birthDate.day, 2, 10, QChar('0'))
                               .arg(static_cast<int>(patient->birthDate.month), 2, 10, QChar('0'))
                               .arg(patient->birthDate.year);
            }
        }

        for (size_t i = 0; i < m_indices.size() && i < 5; ++i) {
            if (m_indices[i] < AppointmentArray.Size()) {
                const Appointment& app = AppointmentArray[m_indices[i]];
                tooltip += QString("%1. %2 - %3 (%4.%5.%6)\n")
                               .arg(i + 1)
                               .arg(QString::fromStdString(app.doctorType))
                               .arg(QString::fromStdString(app.diagnosis))
                               .arg(app.appointmentDate.day, 2, 10, QChar('0'))
                               .arg(static_cast<int>(app.appointmentDate.month), 2, 10, QChar('0'))
                               .arg(app.appointmentDate.year);
            }
        }

        if (m_indices.size() > 5) {
            tooltip += QString("... –∏ –µ—â—ë %1 –ø—Ä–∏—ë–º–æ–≤").arg(m_indices.size() - 5);
        }

        setToolTip(tooltip);
    }

protected:
    void mousePressEvent(QGraphicsSceneMouseEvent* event) override {
        if (event->button() == Qt::LeftButton) {
            QString details = QString("=== –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n\n");
            details += QString("–ü–æ–ª–∏—Å –û–ú–°: %1\n").arg(m_key);
            details += QString("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤: %1\n\n").arg(m_indices.size());

            QDialog* dialog = new QDialog();
            dialog->setWindowTitle(QString("–£–∑–µ–ª –¥–µ—Ä–µ–≤–∞: %1").arg(m_key));
            dialog->resize(500, 400);

            QVBoxLayout* layout = new QVBoxLayout(dialog);
            QTextEdit* textEdit = new QTextEdit(dialog);
            textEdit->setPlainText(details);
            textEdit->setReadOnly(true);

            QPushButton* closeBtn = new QPushButton("–ó–∞–∫—Ä—ã—Ç—å", dialog);
            QObject::connect(closeBtn, &QPushButton::clicked, dialog, &QDialog::accept);

            layout->addWidget(textEdit);
            layout->addWidget(closeBtn);

            dialog->exec();
            dialog->deleteLater();
        }
        QGraphicsEllipseItem::mousePressEvent(event);
    }

    void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override {
        setBrush(QBrush(QColor(255, 223, 186)));
        setPen(QPen(QColor(255, 140, 0), 3));
        QGraphicsEllipseItem::hoverEnterEvent(event);
    }

    void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) override {
        QColor nodeColor;
        if (m_indices.size() == 1) {
            nodeColor = QColor(144, 238, 144);
        } else if (m_indices.size() <= 3) {
            nodeColor = QColor(173, 216, 230);
        } else {
            nodeColor = QColor(255, 182, 193);
        }
        setBrush(QBrush(nodeColor));
        setPen(QPen(QColor(70, 130, 180), 2));
        QGraphicsEllipseItem::hoverLeaveEvent(event);
    }

private:
    QString m_key;
    std::vector<std::size_t> m_indices;
    HashTable* m_hashTable;
    QGraphicsTextItem* m_textItem;
};


using StatusEnum = Status;

Month monthFromShortString(const QString& shortMonth) {
    if (shortMonth == "—è–Ω–≤") return Month::—è–Ω–≤;
    if (shortMonth == "—Ñ–µ–≤") return Month::—Ñ–µ–≤;
    if (shortMonth == "–º–∞—Ä") return Month::–º–∞—Ä;
    if (shortMonth == "–∞–ø—Ä") return Month::–∞–ø—Ä;
    if (shortMonth == "–º–∞–π") return Month::–º–∞–π;
    if (shortMonth == "–∏—é–Ω") return Month::–∏—é–Ω;
    if (shortMonth == "–∏—é–ª") return Month::–∏—é–ª;
    if (shortMonth == "–∞–≤–≥") return Month::–∞–≤–≥;
    if (shortMonth == "—Å–µ–Ω") return Month::—Å–µ–Ω;
    if (shortMonth == "–æ–∫—Ç") return Month::–æ–∫—Ç;
    if (shortMonth == "–Ω–æ—è") return Month::–Ω–æ—è;
    if (shortMonth == "–¥–µ–∫") return Month::–¥–µ–∫;
    return Month::—è–Ω–≤; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

QString MainWindow::formatDate(const Date& date) {
    QStringList monthNames = {
        "", "—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
        "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"
    };
    return QString("%1 %2 %3")
        .arg(date.day)
        .arg(monthNames[static_cast<int>(date.month)])
        .arg(date.year);
}

// –í mainwindow.cpp –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä MainWindow:

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    setupUI();
    setupTreeVisualization();

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    currentTreeType = CurrentTreeType::DateTree;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    connect(loadPatientsAction, &QAction::triggered, this, &MainWindow::loadPatientsFromFile);
    connect(loadAppointmentsAction, &QAction::triggered, this, &MainWindow::loadAppointmentsFromFile);
    connect(addPatientAction, &QAction::triggered, this, &MainWindow::addPatient);
    connect(addAppointmentAction, &QAction::triggered, this, &MainWindow::addAppointment);
    connect(deletePatientAction, &QAction::triggered, this, &MainWindow::deletePatient);
    connect(deleteAppointmentAction, &QAction::triggered, this, &MainWindow::deleteAppointment);
    connect(reportAction, &QAction::triggered, this, &MainWindow::generateReport);
    connect(debugAction, &QAction::triggered, this, &MainWindow::showDebugWindow);

    QAction* integrityAction = new QAction("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏", this);
    connect(integrityAction, &QAction::triggered, this, &MainWindow::showIntegrityReport);
    toolBar->addSeparator();
    toolBar->addAction(integrityAction);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    showPolicyTreeAction->setEnabled(true);
    showDateTreeAction->setEnabled(false);  // –î–µ—Ä–µ–≤–æ –¥–∞—Ç –∞–∫—Ç–∏–≤–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –¥–µ—Ä–µ–≤–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    showEmptyTreeMessage("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏—ë–º—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç");
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::setupUI()
{
    createToolBar();
    createTabs();
}

void MainWindow::setupTreeVisualization() {
    treeGraphicsView->setMouseTracking(true);
    treeGraphicsView->setRenderHint(QPainter::Antialiasing);
    treeGraphicsView->setDragMode(QGraphicsView::ScrollHandDrag);  // –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º—ã—à–∫–æ–π
    treeGraphicsView->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    treeGraphicsView->setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);

    // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞: 10 000 x 5 000
    treeScene->setSceneRect(-5000, -2500, 10000, 5000);

    treeScene->setBackgroundBrush(QBrush(QColor(248, 248, 255))); // —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
}




void MainWindow::createTabs() {
    tabWidget = new QTabWidget(this);
    setCentralWidget(tabWidget);

    // –í–∫–ª–∞–¥–∫–∞: –ü–∞—Ü–∏–µ–Ω—Ç—ã
    patientTable = new QTableWidget(this);
    patientTable->setColumnCount(3);
    patientTable->setHorizontalHeaderLabels({"–§–ò–û", "–ü–æ–ª–∏—Å –û–ú–°", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"});
    patientTable->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    // –í–∫–ª–∞–¥–∫–∞: –ü—Ä–∏–µ–º—ã
    appointmentTable = new QTableWidget(this);
    appointmentTable->setColumnCount(4);
    appointmentTable->setHorizontalHeaderLabels({"–ü–æ–ª–∏—Å –û–ú–°", "–î–∏–∞–≥–Ω–æ–∑", "–í—Ä–∞—á", "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞"});
    appointmentTable->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    // –í–∫–ª–∞–¥–∫–∞: –û—Ç—á—ë—Ç
    // –í–∫–ª–∞–¥–∫–∞: –û—Ç—á—ë—Ç
    reportTable = new QTableWidget(this);
    reportTable->setColumnCount(5);
    reportTable->setHorizontalHeaderLabels({
        "–ü–æ–ª–∏—Å –û–ú–°", "–í—Ä–∞—á", "–î–∏–∞–≥–Ω–æ–∑", "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞", "–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞"
    });
    reportTable->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    fioFilterEdit = new QLineEdit(this);
    fioFilterEdit->setPlaceholderText("–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Ç–æ—á–Ω–æ)");

    doctorFilterEdit = new QLineEdit(this);
    doctorFilterEdit->setPlaceholderText("–¢–∏–ø –≤—Ä–∞—á–∞");

    dateFilterEdit = new QDateEdit(this);
    dateFilterEdit->setDisplayFormat("dd.MM.yyyy");
    dateFilterEdit->setCalendarPopup(true);
    dateFilterEdit->setDate(QDate::currentDate());

    QHBoxLayout* filterLayout = new QHBoxLayout();
    filterLayout->addWidget(new QLabel("–§–ò–û:"));
    filterLayout->addWidget(fioFilterEdit);
    filterLayout->addWidget(new QLabel("–í—Ä–∞—á:"));
    filterLayout->addWidget(doctorFilterEdit);
    filterLayout->addWidget(new QLabel("–î–∞—Ç–∞:"));
    filterLayout->addWidget(dateFilterEdit);

    QVBoxLayout* reportLayout = new QVBoxLayout();
    reportLayout->addLayout(filterLayout);
    reportLayout->addWidget(reportTable);

    QWidget* reportTab = new QWidget(this);
    reportTab->setLayout(reportLayout);



    // –í–∫–ª–∞–¥–∫–∞: –•—ç—à —Ç–∞–±–ª–∏—Ü–∞
    hashTableView = new QTableWidget(this);
    hashTableView->setColumnCount(7);
    hashTableView->setHorizontalHeaderLabels({
        "–ò–Ω–¥–µ–∫—Å", "–•—ç—à", "–°—Ç–∞—Ç—É—Å", "–ö–ª—é—á", "–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ò–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ"
    });
    hashTableView->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    // –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê: AVL-–¥–µ—Ä–µ–≤–æ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
    avlTreeTableView = new QTableWidget(this);
    avlTreeTableView->setColumnCount(6);
    avlTreeTableView->setHorizontalHeaderLabels({
        "–ü–æ–ª–∏—Å –û–ú–°", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤", "–í—Ä–∞—á", "–î–∏–∞–≥–Ω–æ–∑", "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞", "–ò–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ"
    });
    avlTreeTableView->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    // –í–∫–ª–∞–¥–∫–∞: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ (–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è)
    treeGraphicsView = new QGraphicsView(this);
    treeScene = new QGraphicsScene(this);
    treeGraphicsView->setScene(treeScene);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
    tabWidget->addTab(patientTable, "–ü–∞—Ü–∏–µ–Ω—Ç—ã");
    tabWidget->addTab(appointmentTable, "–ü—Ä–∏–µ–º—ã");
    tabWidget->addTab(reportTab, "–û—Ç—á—ë—Ç");  // ‚Üê ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ

    tabWidget->addTab(hashTableView, "–•—ç—à —Ç–∞–±–ª–∏—Ü–∞");
    tabWidget->addTab(avlTreeTableView, "AVL-–¥–µ—Ä–µ–≤–æ (—Ç–∞–±–ª–∏—Ü–∞)");
    tabWidget->addTab(treeGraphicsView, "–î–µ—Ä–µ–≤–æ (–≥—Ä–∞—Ñ)");
}



void MainWindow::showPolicyTree() {
    qDebug().noquote() << "[showPolicyTree] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ä–µ–≤–æ –ø–æ –û–ú–°";

    currentTreeType = CurrentTreeType::PolicyTree;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–µ—Ä–µ–≤–∞
    tabWidget->setCurrentIndex(5);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
    updateCurrentTree();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    showPolicyTreeAction->setEnabled(false);
    showDateTreeAction->setEnabled(true);
}

void MainWindow::showDateTree() {
    qDebug().noquote() << "[showDateTree] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ä–µ–≤–æ –ø–æ –¥–∞—Ç–∞–º";

    currentTreeType = CurrentTreeType::DateTree;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–µ—Ä–µ–≤–∞
    tabWidget->setCurrentIndex(5);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
    updateCurrentTree();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    showPolicyTreeAction->setEnabled(true);
    showDateTreeAction->setEnabled(false);
}

void MainWindow::updateCurrentTree() {
    qDebug().noquote() << "[updateCurrentTree] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞";

    // –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
    clearTreeVisualization();

    if (currentTreeType == CurrentTreeType::PolicyTree) {
        // –î–µ—Ä–µ–≤–æ –ø–æ –û–ú–°
        auto root = avlTree.getRoot();
        if (root) {
            drawTreeByPolicy(root);
            qDebug().noquote() << "‚Üí –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–û–ú–°) –æ–±–Ω–æ–≤–ª–µ–Ω–æ";
        } else {
            showEmptyTreeMessage("–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–ø–æ –û–ú–°) –ø—É—Å—Ç–æ–µ\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏—ë–º—ã");
        }
    } else {
        // –î–µ—Ä–µ–≤–æ –ø–æ –¥–∞—Ç–∞–º - –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if (AppointmentArray.Size() > 0) {
            buildDateTreeForReport();
            auto root = dateTree.getRoot();
            if (root) {
                drawTreeByDate(root);
                qDebug().noquote() << "‚Üí –î–µ—Ä–µ–≤–æ –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ";
            } else {
                showEmptyTreeMessage("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç");
            }
        } else {
            showEmptyTreeMessage("–î–µ—Ä–µ–≤–æ –¥–∞—Ç –ø—É—Å—Ç–æ–µ\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∏—ë–º—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞");
        }
    }

    treeGraphicsView->centerOn(0, 0);
}

void MainWindow::createToolBar()
{
    toolBar = addToolBar("Main Toolbar");

    loadPatientsAction = new QAction("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", this);
    loadAppointmentsAction = new QAction("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏—ë–º—ã", this);
    addPatientAction = new QAction("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", this);
    addAppointmentAction = new QAction("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º", this);
    deletePatientAction = new QAction("–£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", this);
    deleteAppointmentAction = new QAction("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—ë–º", this);
    debugAction = new QAction("–û–∫–Ω–æ –æ—Ç–ª–∞–¥–∫–∏", this);
    reportAction = new QAction("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", this);
    searchSplitAction = new QAction("–†–∞–∑–¥–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", this);

    // –ö–Ω–æ–ø–∫–∏ –¥–µ—Ä–µ–≤—å–µ–≤
    showPolicyTreeAction = new QAction("–î–µ—Ä–µ–≤–æ –û–ú–°", this);
    showPolicyTreeAction->setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–ø–æ –ø–æ–ª–∏—Å–∞–º –û–ú–°)");

    showDateTreeAction = new QAction("–î–µ—Ä–µ–≤–æ –¥–∞—Ç", this);
    showDateTreeAction->setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ –¥–∞—Ç–∞–º –ø—Ä–∏—ë–º–æ–≤)");

    updateTreeAction = new QAction("–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ", this);
    updateTreeAction->setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ");

    // –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –û—Ç–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç
    QAction* debugDateTreeAction = new QAction("–û—Ç–ª–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç", this);
    debugDateTreeAction->setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç");

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    toolBar->addAction(loadPatientsAction);
    toolBar->addAction(loadAppointmentsAction);
    toolBar->addSeparator();
    toolBar->addAction(addPatientAction);
    toolBar->addAction(addAppointmentAction);
    toolBar->addSeparator();
    toolBar->addAction(deletePatientAction);
    toolBar->addAction(deleteAppointmentAction);
    toolBar->addSeparator();
    toolBar->addAction(debugAction);
    toolBar->addAction(reportAction);
    toolBar->addSeparator();
    toolBar->addAction(searchSplitAction);

    // –ö–Ω–æ–ø–∫–∏ –¥–µ—Ä–µ–≤—å–µ–≤
    toolBar->addSeparator();
    toolBar->addAction(showPolicyTreeAction);
    toolBar->addAction(showDateTreeAction);
    toolBar->addAction(updateTreeAction);
    toolBar->addAction(debugDateTreeAction);  // –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    connect(loadPatientsAction, &QAction::triggered, this, &MainWindow::loadPatientsFromFile);
    connect(loadAppointmentsAction, &QAction::triggered, this, &MainWindow::loadAppointmentsFromFile);
    connect(addPatientAction, &QAction::triggered, this, &MainWindow::addPatient);
    connect(addAppointmentAction, &QAction::triggered, this, &MainWindow::addAppointment);
    connect(deletePatientAction, &QAction::triggered, this, &MainWindow::deletePatient);
    connect(deleteAppointmentAction, &QAction::triggered, this, &MainWindow::deleteAppointment);
    connect(reportAction, &QAction::triggered, this, &MainWindow::generateReport);
    connect(debugAction, &QAction::triggered, this, &MainWindow::showDebugWindow);
    connect(searchSplitAction, &QAction::triggered, this, &MainWindow::showSplitSearchDialog);

    // –°–∏–≥–Ω–∞–ª—ã –¥–µ—Ä–µ–≤—å–µ–≤
    connect(showPolicyTreeAction, &QAction::triggered, this, &MainWindow::showPolicyTree);
    connect(showDateTreeAction, &QAction::triggered, this, &MainWindow::showDateTree);
    connect(updateTreeAction, &QAction::triggered, this, &MainWindow::updateCurrentTree);
    connect(debugDateTreeAction, &QAction::triggered, this, &MainWindow::debugDateTreeNodes);  // –ù–û–í–´–ô –°–ò–ì–ù–ê–õ
}


void MainWindow::loadPatientsFromFile() {
    QString filename = QFileDialog::getOpenFileName(this,
                                                    "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "", "Text Files (*.txt)");

    if (filename.isEmpty()) return;

    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤");
        return;
    }

    QTextStream in(&file);
    int loaded = 0;
    int lineNumber = 0;

    while (!in.atEnd()) {
        QString line = in.readLine().trimmed();
        lineNumber++;

        if (line.isEmpty()) continue;

        std::string policy;
        Patient patient;

        if (parsePatientLine(line, policy, patient)) {
            try {
                hashTable.insert(policy,
                                 patient.surname + " " + patient.name + " " + patient.middlename,
                                 patient.birthDate.day, patient.birthDate.month, patient.birthDate.year);
                loaded++;
            } catch (const std::exception& e) {
                qDebug() << "–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ" << lineNumber << ":" << e.what();
            }
        } else {
            qDebug() << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏" << lineNumber << ":" << line;
        }
    }

    file.close();
    updateAllTables();

    QMessageBox::information(this, "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                             QString("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: %1").arg(loaded));
}

void MainWindow::loadAppointmentsFromFile() {
    QString filename = QFileDialog::getOpenFileName(this,
                                                    "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–∏—ë–º–æ–≤", "", "Text Files (*.txt)");

    if (filename.isEmpty()) return;

    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø—Ä–∏—ë–º–æ–≤");
        return;
    }

    QTextStream in(&file);
    int loaded = 0;
    int skipped = 0;
    int lineNumber = 0;

    while (!in.atEnd()) {
        QString line = in.readLine().trimmed();
        lineNumber++;

        if (line.isEmpty()) continue;

        std::string policy;
        Appointment appointment;

        if (parseAppointmentLine(line, policy, appointment)) {
            if (!patientExists(policy)) {
                qDebug() << "–°—Ç—Ä–æ–∫–∞" << lineNumber << ": –ü–∞—Ü–∏–µ–Ω—Ç —Å –ø–æ–ª–∏—Å–æ–º"
                         << QString::fromStdString(policy) << "–Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏—ë–º.";
                skipped++;
                continue;
            }

            if (avlTree.insert(policy, appointment, AppointmentArray)) {
                appointmentPolicies.push_back(policy);
                loaded++;
            } else {
                qDebug() << "–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏—ë–º–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ" << lineNumber;
                skipped++;
            }
        } else {
            qDebug() << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏" << lineNumber << ":" << line;
            skipped++;
        }
    }

    file.close();

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã (–ë–ï–ó –¥–µ—Ä–µ–≤–∞)
    updateAllTables();

    // –ó–∞—Ç–µ–º —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –¥–∞—Ç –û–î–ò–ù —Ä–∞–∑
    if (loaded > 0) {
        buildDateTreeForReport();

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–µ—Ä–µ–≤–æ –¥–∞—Ç
        currentTreeType = CurrentTreeType::DateTree;
        showPolicyTreeAction->setEnabled(true);
        showDateTreeAction->setEnabled(false);
        tabWidget->setCurrentIndex(5);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –û–î–ò–ù —Ä–∞–∑
        updateCurrentTree();
    }

    QString message = QString("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                              "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∏—ë–º–æ–≤: %1\n"
                              "–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞): %2")
                          .arg(loaded).arg(skipped);

    QMessageBox::information(this, "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", message);
}

bool MainWindow::parsePatientLine(const QString& line, std::string& policy, Patient& patient) {
    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: 1234 5678 9012 3456 –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 12 —è–Ω–≤ 1990
    QStringList parts = line.split(" ", Qt::SkipEmptyParts);
    if (parts.size() != 10) return false;

    // –ü–æ–ª–∏—Å = –ø–µ—Ä–≤—ã–µ 4 —á–∞—Å—Ç–∏
    QString policyStr = parts[0] + parts[1] + parts[2] + parts[3];
    policy = policyStr.toStdString();

    // –§–ò–û
    patient.surname = parts[4].toStdString();
    patient.name = parts[5].toStdString();
    patient.middlename = parts[6].toStdString();

    // –î–∞—Ç–∞
    bool ok;
    patient.birthDate.day = parts[7].toInt(&ok);
    if (!ok) return false;

    patient.birthDate.month = monthFromShortString(parts[8]);
    patient.birthDate.year = parts[9].toInt(&ok);
    if (!ok) return false;

    return true;
}


bool MainWindow::parseAppointmentLine(const QString& line, std::string& policy, Appointment& appointment) {
    QStringList parts = line.split(" ", Qt::SkipEmptyParts);

    // –ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 8 —á–∞—Å—Ç–µ–π: 4 (–ø–æ–ª–∏—Å) + 1 (–¥–∏–∞–≥–Ω–æ–∑) + 1 (–≤—Ä–∞—á) + 1 (–¥–µ–Ω—å) + 1 (–º–µ—Å—è—Ü) + 1 (–≥–æ–¥)
    if (parts.size() < 8) {
        qDebug() << "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —á–∞—Å—Ç–µ–π –≤ —Å—Ç—Ä–æ–∫–µ:" << parts.size() << "–º–∏–Ω–∏–º—É–º 8";
        qDebug() << "–°—Ç—Ä–æ–∫–∞:" << line;
        return false;
    }

    // –ü–æ–ª–∏—Å (–ø–µ—Ä–≤—ã–µ 4 —á–∞—Å—Ç–∏)
    QString policyStr = parts[0] + parts[1] + parts[2] + parts[3];
    policy = policyStr.toStdString();

    // –î–∞—Ç–∞ –∏ –º–µ—Å—è—Ü –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ
    bool ok;
    QString yearStr = parts.last();        // –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –≥–æ–¥
    QString monthStr = parts[parts.size()-2]; // –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π - –º–µ—Å—è—Ü
    QString dayStr = parts[parts.size()-3];   // —Ç—Ä–µ—Ç–∏–π —Å –∫–æ–Ω—Ü–∞ - –¥–µ–Ω—å

    int year = yearStr.toInt(&ok);
    if (!ok) {
        qDebug() << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–¥–∞:" << yearStr;
        return false;
    }

    int day = dayStr.toInt(&ok);
    if (!ok) {
        qDebug() << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–Ω—è:" << dayStr;
        return false;
    }

    Month month = monthFromShortString(monthStr);

    // –í—Ä–∞—á - —á–µ—Ç–≤–µ—Ä—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–Ω—Ü–∞
    QString doctorStr = parts[parts.size()-4];

    // –î–∏–∞–≥–Ω–æ–∑ - –≤—Å–µ —á—Ç–æ –º–µ–∂–¥—É –ø–æ–ª–∏—Å–æ–º –∏ –≤—Ä–∞—á–æ–º
    QStringList diagnosisParts;
    for (int i = 4; i < parts.size() - 4; ++i) {
        diagnosisParts << parts[i];
    }
    QString diagnosisStr = diagnosisParts.join(" "); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–±–µ–ª–∞–º–∏

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    appointment.doctorType = doctorStr.toStdString();
    appointment.diagnosis = diagnosisStr.toStdString();
    appointment.appointmentDate = {day, month, year};

    qDebug() << "–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:"
             << "–ø–æ–ª–∏—Å=" << QString::fromStdString(policy)
             << "–¥–∏–∞–≥–Ω–æ–∑=" << diagnosisStr
             << "–≤—Ä–∞—á=" << doctorStr
             << "–¥–∞—Ç–∞=" << day << monthStr << year;

    return true;
}



void MainWindow::updatePatientTable() {
    patientTable->setRowCount(0);

    for (std::size_t i = 0; i < PatientArray.Size(); ++i) {
        const Patient& patient = PatientArray[i];
        std::string policy = hashTable.getKeyForIndex(i);

        QString fio = QString("%1 %2 %3")
                          .arg(QString::fromStdString(patient.surname))
                          .arg(QString::fromStdString(patient.name))
                          .arg(QString::fromStdString(patient.middlename));

        QString birth = formatDate(patient.birthDate);

        int row = patientTable->rowCount();
        patientTable->insertRow(row);
        patientTable->setItem(row, 0, new QTableWidgetItem(fio));
        patientTable->setItem(row, 1, new QTableWidgetItem(QString::fromStdString(policy)));
        patientTable->setItem(row, 2, new QTableWidgetItem(birth));
    }
}

void MainWindow::updateAppointmentTable() {
    appointmentTable->setRowCount(0);

    for (std::size_t i = 0; i < AppointmentArray.Size() && i < appointmentPolicies.size(); ++i) {
        const Appointment& app = AppointmentArray[i];

        QString policy = QString::fromStdString(appointmentPolicies[i]);
        QString diagnosis = QString::fromStdString(app.diagnosis);
        QString doctor = QString::fromStdString(app.doctorType);
        QString date = formatDate(app.appointmentDate);

        int row = appointmentTable->rowCount();
        appointmentTable->insertRow(row);
        appointmentTable->setItem(row, 0, new QTableWidgetItem(policy));
        appointmentTable->setItem(row, 1, new QTableWidgetItem(diagnosis));
        appointmentTable->setItem(row, 2, new QTableWidgetItem(doctor));
        appointmentTable->setItem(row, 3, new QTableWidgetItem(date));
    }
}

void MainWindow::updateHashTableView() {
    hashTableView->setRowCount(hashTable.getSize());

    for (std::size_t i = 0; i < hashTable.getSize(); ++i) {
        const HashRecord& record = hashTable.getRecord(i);

        // –ò–Ω–¥–µ–∫—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
        hashTableView->setItem(i, 0, new QTableWidgetItem(QString::number(i)));

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ö—ç—à-–∑–Ω–∞—á–µ–Ω–∏–µ
        if (record.getStatus() == ::Status::Active) {
            std::size_t hashValue = hashTable.getHashValue(record.key);
            hashTableView->setItem(i, 1, new QTableWidgetItem(QString::number(hashValue)));
        } else {
            hashTableView->setItem(i, 1, new QTableWidgetItem("-"));
        }

        // –°—Ç–∞—Ç—É—Å
        QString status;
        switch (record.getStatus()) {
        case Status::Empty:   status = "Empty"; break;
        case Status::Active:  status = "Active"; break;
        case Status::Deleted: status = "Deleted"; break;
        }
        hashTableView->setItem(i, 2, new QTableWidgetItem(status));


        // –ö–ª—é—á (–ø–æ–ª–∏—Å)
        hashTableView->setItem(i, 3, new QTableWidgetItem(QString::fromStdString(record.getKey())));

        if (record.getStatus() == ::Status::Active) {
            const Patient& patient = PatientArray[record.getArrayIndex()];
            QString fio = QString("%1 %2 %3")
                              .arg(QString::fromStdString(patient.surname))
                              .arg(QString::fromStdString(patient.name))
                              .arg(QString::fromStdString(patient.middlename));

            hashTableView->setItem(i, 4, new QTableWidgetItem(fio));
            hashTableView->setItem(i, 5, new QTableWidgetItem(formatDate(patient.birthDate)));
            hashTableView->setItem(i, 6, new QTableWidgetItem(QString::number(record.getArrayIndex())));
        } else {
            hashTableView->setItem(i, 4, new QTableWidgetItem(""));
            hashTableView->setItem(i, 5, new QTableWidgetItem(""));
            hashTableView->setItem(i, 6, new QTableWidgetItem(""));
        }
    }
}

void MainWindow::updateTreeView() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º
}

void MainWindow::updateAllTables() {
    qDebug().noquote() << "[updateAllTables] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü";

    updatePatientTable();
    updateAppointmentTable();
    updateHashTableView();
    updateAVLTreeTableView();

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateCurrentTree –∑–¥–µ—Å—å!
    // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    qDebug().noquote() << "[updateAllTables] –¢–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–±–µ–∑ –¥–µ—Ä–µ–≤–∞)";
}

void MainWindow::addPatient() {
    // –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
    bool ok;
    QString policyInput = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                                                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–∏—Å –û–ú–° (16 —Ü–∏—Ñ—Ä):",
                                                QLineEdit::Normal, "", &ok);
    if (!ok || policyInput.isEmpty()) return;

    std::string policy = policyInput.toStdString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–∏—Å–∞
    if (policy.length() != 16 || !std::all_of(policy.begin(), policy.end(), ::isdigit)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ü–æ–ª–∏—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 16 —Ü–∏—Ñ—Ä!");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª–∏—Å
    if (hashTable.exists(policy)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞",
                             QString("–ü–∞—Ü–∏–µ–Ω—Ç —Å –ø–æ–ª–∏—Å–æ–º %1 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                                 .arg(QString::fromStdString(policy)));
        return;
    }

    QString surname = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                                            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:",
                                            QLineEdit::Normal, "", &ok);
    if (!ok || surname.isEmpty()) return;

    QString name = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                                         "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:",
                                         QLineEdit::Normal, "", &ok);
    if (!ok || name.isEmpty()) return;

    QString middlename = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                                               "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:",
                                               QLineEdit::Normal, "", &ok);
    if (!ok || middlename.isEmpty()) return;

    if (!isValidStringField(surname.toStdString()) ||
        !isValidStringField(name.toStdString()) ||
        !isValidStringField(middlename.toStdString())) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                             "–§–∞–º–∏–ª–∏—è, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.");
        return;
    }


    // –í–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    int day = QInputDialog::getInt(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", 1, 1, 31, 1, &ok);
    if (!ok) return;

    QStringList months = {"—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
                          "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"};
    QString monthStr = QInputDialog::getItem(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–ú–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:",
                                             months, 0, false, &ok);
    if (!ok) return;

    int year = QInputDialog::getInt(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:", 1990, 1900, 2100, 1, &ok);
    if (!ok) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –§–ò–û –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É
    QString fullName = QString("%1 %2 %3").arg(surname).arg(name).arg(middlename);

    try {
        Month birthMonth = monthFromShortString(monthStr);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—É
        if (hashTable.insert(policy, fullName.toStdString(), day, birthMonth, year)) {
            updateAllTables();
            QMessageBox::information(this, "–£—Å–ø–µ—Ö",
                                     QString("–ü–∞—Ü–∏–µ–Ω—Ç %1 —Å –ø–æ–ª–∏—Å–æ–º %2 –¥–æ–±–∞–≤–ª–µ–Ω!")
                                         .arg(fullName)
                                         .arg(QString::fromStdString(policy)));
        }
    } catch (const std::exception& e) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞",
                             QString("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞: %1")
                                 .arg(e.what()));
    }
}

void MainWindow::addAppointment() {
    // –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–∞
    bool ok;
    QString policyInput = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
                                                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–∏—Å –û–ú–° (16 —Ü–∏—Ñ—Ä):",
                                                QLineEdit::Normal, "", &ok);
    if (!ok || policyInput.isEmpty()) return;

    std::string policy = policyInput.toStdString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–∏—Å–∞
    if (policy.length() != 16 || !std::all_of(policy.begin(), policy.end(), ::isdigit)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ü–æ–ª–∏—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 16 —Ü–∏—Ñ—Ä!");
        return;
    }

    QString doctorType = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
                                               "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤—Ä–∞—á–∞:",
                                               QLineEdit::Normal, "", &ok);
    if (!ok || doctorType.isEmpty()) return;

    QString diagnosis = QInputDialog::getText(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
                                              "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:",
                                              QLineEdit::Normal, "", &ok);
    if (!ok || diagnosis.isEmpty()) return;

    // –í–≤–æ–¥ –¥–∞—Ç—ã
    int day = QInputDialog::getInt(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞", "–î–µ–Ω—å:", 1, 1, 31, 1, &ok);
    if (!ok) return;

    QStringList months = {"—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
                          "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"};
    QString monthStr = QInputDialog::getItem(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞", "–ú–µ—Å—è—Ü:",
                                             months, 0, false, &ok);
    if (!ok) return;

    int year = QInputDialog::getInt(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞", "–ì–æ–¥:", 2024, 1900, 2100, 1, &ok);
    if (!ok) return;

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏—ë–º–∞
    Appointment appointment;
    appointment.doctorType = doctorType.toStdString();
    appointment.diagnosis = diagnosis.toStdString();
    appointment.appointmentDate.day = day;
    appointment.appointmentDate.month = monthFromShortString(monthStr);
    appointment.appointmentDate.year = year;

    // –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ï–ù–¶–ò–ê–õ–¨–ù–û–ô –¶–ï–õ–û–°–¢–ù–û–°–¢–ò
    if (!validateAppointmentData(policy, appointment)) {
        return; // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—ë–º
    if (avlTree.insert(policy, appointment, AppointmentArray)) {
        appointmentPolicies.push_back(policy);
        updateAllTables();

        QMessageBox::information(this, "–£—Å–ø–µ—Ö",
                                 QString("–ü—Ä–∏—ë–º –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–∏—Å–æ–º %1 –¥–æ–±–∞–≤–ª–µ–Ω!")
                                     .arg(QString::fromStdString(policy)));
    } else {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º!");
    }

    if (avlTree.insert(policy, appointment, AppointmentArray)) {
        appointmentPolicies.push_back(policy);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Ç–∞–±–ª–∏—Ü—ã (–ë–ï–ó –¥–µ—Ä–µ–≤–∞)
        updateAllTables();

        // –ó–∞—Ç–µ–º –¥–µ—Ä–µ–≤–æ –¥–∞—Ç –û–î–ò–ù —Ä–∞–∑
        buildDateTreeForReport();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ –û–î–ò–ù —Ä–∞–∑
        updateCurrentTree();

        QMessageBox::information(this, "–£—Å–ø–µ—Ö",
                                 QString("–ü—Ä–∏—ë–º –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–∏—Å–æ–º %1 –¥–æ–±–∞–≤–ª–µ–Ω!")
                                     .arg(QString::fromStdString(policy)));
    } else {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º!");
    }
}


void MainWindow::deletePatient() {
    bool ok;
    QString policyInput = QInputDialog::getText(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                                                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–∏—Å –û–ú–° –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                                QLineEdit::Normal, "", &ok);
    if (!ok || policyInput.isEmpty()) return;

    std::string policy = policyInput.toStdString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (!patientExists(policy)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞",
                             QString("–ü–∞—Ü–∏–µ–Ω—Ç —Å –ø–æ–ª–∏—Å–æ–º %1 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                                 .arg(QString::fromStdString(policy)));
        return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    int ret = QMessageBox::question(this, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                                    QString("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–∏—Å–æ–º %1?\n\n"
                                            "–í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –ø—Ä–∏—ë–º—ã —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞!")
                                        .arg(QString::fromStdString(policy)),
                                    QMessageBox::Yes | QMessageBox::No);

    if (ret != QMessageBox::Yes) return;

    // –ö–ê–°–ö–ê–î–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï: —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–∏—ë–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞
    deleteAllAppointmentsForPatient(policy);

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (hashTable.remove(policy)) {
        updateAllTables();
        QMessageBox::information(this, "–£—Å–ø–µ—Ö",
                                 QString("–ü–∞—Ü–∏–µ–Ω—Ç —Å –ø–æ–ª–∏—Å–æ–º %1 –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–∏—ë–º—ã —É–¥–∞–ª–µ–Ω—ã!")
                                     .arg(QString::fromStdString(policy)));
    } else {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞!");
    }
}

void MainWindow::deleteAppointment() {
    bool ok;
    QString policyInput = QInputDialog::getText(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
                                                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–∏—Å –û–ú–°:",
                                                QLineEdit::Normal, "", &ok);
    if (!ok || policyInput.isEmpty()) return;

    std::string policy = policyInput.toStdString();

    QString doctorType = QInputDialog::getText(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
                                               "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤—Ä–∞—á–∞:",
                                               QLineEdit::Normal, "", &ok);
    if (!ok || doctorType.isEmpty()) return;

    QString diagnosis = QInputDialog::getText(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞",
                                              "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑:",
                                              QLineEdit::Normal, "", &ok);
    if (!ok || diagnosis.isEmpty()) return;

    // –í–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞
    int day = QInputDialog::getInt(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞", "–î–µ–Ω—å:", 1, 1, 31, 1, &ok);
    if (!ok) return;

    QStringList months = {"—è–Ω–≤", "—Ñ–µ–≤", "–º–∞—Ä", "–∞–ø—Ä", "–º–∞–π", "–∏—é–Ω",
                          "–∏—é–ª", "–∞–≤–≥", "—Å–µ–Ω", "–æ–∫—Ç", "–Ω–æ—è", "–¥–µ–∫"};
    QString monthStr = QInputDialog::getItem(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞", "–ú–µ—Å—è—Ü:",
                                             months, 0, false, &ok);
    if (!ok) return;

    int year = QInputDialog::getInt(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞", "–ì–æ–¥:", 2024, 1900, 2100, 1, &ok);
    if (!ok) return;

    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏—ë–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    Appointment appointment;
    appointment.doctorType = doctorType.toStdString();
    appointment.diagnosis = diagnosis.toStdString();
    appointment.appointmentDate.day = day;
    appointment.appointmentDate.month = monthFromShortString(monthStr);
    appointment.appointmentDate.year = year;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏—ë–º –∏–∑ –¥–µ—Ä–µ–≤–∞
    if (avlTree.remove(policy, appointment, AppointmentArray)) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Ç–∞–±–ª–∏—Ü—ã (–ë–ï–ó –¥–µ—Ä–µ–≤–∞)
        updateAllTables();

        // –ó–∞—Ç–µ–º –¥–µ—Ä–µ–≤–æ –¥–∞—Ç –û–î–ò–ù —Ä–∞–∑
        buildDateTreeForReport();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ –û–î–ò–ù —Ä–∞–∑
        updateCurrentTree();

        QMessageBox::information(this, "–£—Å–ø–µ—Ö", "–ü—Ä–∏—ë–º —É–¥–∞–ª—ë–Ω!");
    } else {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ü—Ä–∏—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å!");
    }
}

void MainWindow::debugDateTreeNodes() {
    qDebug().noquote() << "\n=== –û–¢–õ–ê–î–ö–ê –£–ó–õ–û–í –î–ï–†–ï–í–ê –î–ê–¢ ===";

    auto root = dateTree.getRoot();
    if (!root) {
        qDebug().noquote() << "–î–µ—Ä–µ–≤–æ –¥–∞—Ç –ø—É—Å—Ç–æ–µ!";
        return;
    }

    std::map<std::string, std::vector<std::size_t>> dateNodes;

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∑–ª—ã –¥–µ—Ä–µ–≤–∞
    dateTree.traverseIndex([&](std::size_t index, const std::string& dateKey) {
        dateNodes[dateKey].push_back(index);
    });

    qDebug().noquote() << QString("–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: %1").arg(dateNodes.size());

    for (const auto& [dateKey, indices] : dateNodes) {
        Date date = stringToDate(dateKey);
        QString displayDate = QString("%1.%2.%3")
                                  .arg(date.day, 2, 10, QChar('0'))
                                  .arg(static_cast<int>(date.month), 2, 10, QChar('0'))
                                  .arg(date.year);

        qDebug().noquote() << QString("\nüìÖ –î–ê–¢–ê: %1 (–∫–ª—é—á: %2)")
                                  .arg(displayDate)
                                  .arg(QString::fromStdString(dateKey));
        qDebug().noquote() << QString("   –ü—Ä–∏—ë–º–æ–≤: %1").arg(indices.size());

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞
        for (size_t i = 0; i < indices.size() && i < 5; ++i) {
            std::size_t idx = indices[i];
            if (idx < AppointmentArray.Size()) {
                const Appointment& app = AppointmentArray[idx];
                QString policy = (idx < appointmentPolicies.size()) ?
                                     QString::fromStdString(appointmentPolicies[idx]) : "–ù–ï–¢_–ü–û–õ–ò–°–ê";

                qDebug().noquote() << QString("   %1. [%2] %3 ‚Üí %4 (–ø–æ–ª–∏—Å: %5)")
                                          .arg(i + 1)
                                          .arg(idx)
                                          .arg(QString::fromStdString(app.doctorType))
                                          .arg(QString::fromStdString(app.diagnosis))
                                          .arg(policy);
            } else {
                qDebug().noquote() << QString("   %1. [%2] –û–®–ò–ë–ö–ê: –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –º–∞—Å—Å–∏–≤–∞!")
                                          .arg(i + 1).arg(idx);
            }
        }

        if (indices.size() > 5) {
            qDebug().noquote() << QString("   ... –∏ –µ—â—ë %1 –ø—Ä–∏—ë–º–æ–≤").arg(indices.size() - 5);
        }
    }

    qDebug().noquote() << "=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò –£–ó–õ–û–í ===\n";
}


void MainWindow::saveFullReportToFile(const QString& filePath, const std::vector<FullReportRecord>& reportData) {
    QFile file(filePath);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞.");
        return;
    }

    QTextStream out(&file);

    out << "=== –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢ –û –ü–†–ò–Å–ú–ê–• –ü–ê–¶–ò–ï–ù–¢–û–í ===\n\n";
    out << "–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: " << QDateTime::currentDateTime().toString("dd.MM.yyyy hh:mm") << "\n";
    out << "–°–∏—Å—Ç–µ–º–∞: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —Å AVL-–¥–µ—Ä–µ–≤—å—è–º–∏\n\n";

    out << "–ü–ê–†–ê–ú–ï–¢–†–´ –û–¢–ß–ï–¢–ê:\n";
    out << "–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: " << (fioFilterEdit->text().isEmpty() ? "–í—Å–µ" : fioFilterEdit->text()) << "\n";
    out << "–¢–∏–ø –≤—Ä–∞—á–∞: " << (doctorFilterEdit->text().isEmpty() ? "–í—Å–µ" : doctorFilterEdit->text()) << "\n";
    out << "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞: " << dateFilterEdit->date().toString("dd.MM.yyyy") << "\n\n";

    out << QString("–†–ï–ó–£–õ–¨–¢–ê–¢: %1 –∑–∞–ø–∏—Å–µ–π\n").arg(reportData.size());
    out << QString("=").repeated(120) << "\n\n";

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    out << QString("%-12s %-15s %-20s %-18s %-15s %-12s %-15s %-12s %-8s %s\n")
               .arg("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞")
               .arg("–í—Ä–∞—á")
               .arg("–î–∏–∞–≥–Ω–æ–∑")
               .arg("–ü–æ–ª–∏—Å –û–ú–°")
               .arg("–§–∞–º–∏–ª–∏—è")
               .arg("–ò–º—è")
               .arg("–û—Ç—á–µ—Å—Ç–≤–æ")
               .arg("–î–∞—Ç–∞ —Ä–æ–∂–¥.")
               .arg("–ò–Ω–¥–µ–∫—Å")
               .arg("–°—Ç–∞—Ç—É—Å");

    out << QString("-").repeated(120) << "\n";

    // –î–∞–Ω–Ω—ã–µ
    for (const auto& record : reportData) {
        out << QString("%-12s %-15s %-20s %-18s %-15s %-12s %-15s %-12s %-8d %s\n")
        .arg(formatDate(record.appointmentDate))
            .arg(QString::fromStdString(record.doctorType))
            .arg(QString::fromStdString(record.diagnosis))
            .arg(QString::fromStdString(record.patientPolicy))
            .arg(QString::fromStdString(record.patientSurname))
            .arg(QString::fromStdString(record.patientName))
            .arg(QString::fromStdString(record.patientMiddlename))
            .arg(formatDate(record.patientBirthDate))
            .arg(record.appointmentIndex)
            .arg(record.patientFound ? "–û–ö" : "–ù–ï –ù–ê–ô–î–ï–ù");
    }

    out << "\n" << QString("=").repeated(120) << "\n";
    out << "–ö–æ–Ω–µ—Ü –æ—Ç—á–µ—Ç–∞\n";

    file.close();
    QMessageBox::information(this, "–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω",
                             QString("–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª:\n%1\n\n–ó–∞–ø–∏—Å–µ–π: %2")
                                 .arg(filePath)
                                 .arg(reportData.size()));
}

// ===================================================================
// –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –í–¢–û–†–û–ì–û –î–ï–†–ï–í–ê (–ø–æ –¥–∞—Ç–∞–º):

void MainWindow::updateTreeVisualization() {
    qDebug().noquote() << "[updateTreeVisualization] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ";

    // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ—Ä–µ–≤–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    updateCurrentTree();
}

void MainWindow::showDateTreeForDebugging() {
    qDebug().noquote() << "[showDateTreeForDebugging] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç";

    currentTreeType = CurrentTreeType::DateTree;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–µ—Ä–µ–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    tabWidget->setCurrentIndex(5);

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
    updateCurrentTree();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    showPolicyTreeAction->setEnabled(true);
    showDateTreeAction->setEnabled(false);
}

void MainWindow::drawTreeByPolicy(AVLNode<std::string, Appointment, Array<Appointment, 1000>>* root) {
    if (!root) return;

    int treeHeight = calculateTreeHeight(root);
    int treeWidth = calculateTreeWidth(root);

    int sceneWidth = std::max(800, treeWidth * 120);
    int sceneHeight = std::max(600, treeHeight * 100);
    treeScene->setSceneRect(-sceneWidth/2, -50, sceneWidth, sceneHeight);

    drawNode(root, 0, 80, sceneWidth * 0.3, 1);
}

Date MainWindow::stringToDate(const std::string& dateStr) {
    if (dateStr.length() != 8) {
        return {1, Month::—è–Ω–≤, 2000}; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    int year = std::stoi(dateStr.substr(0, 4));
    int month = std::stoi(dateStr.substr(4, 2));
    int day = std::stoi(dateStr.substr(6, 2));

    return {day, static_cast<Month>(month), year};
}
void MainWindow::drawTreeByDate(AVLNode<std::string, Appointment, Array<Appointment, 1000>>* root) {
    if (!root) return;

    int treeHeight = calculateTreeHeight(root);
    int treeWidth = calculateTreeWidth(root);

    int sceneWidth = std::max(800, treeWidth * 120);
    int sceneHeight = std::max(600, treeHeight * 100);
    treeScene->setSceneRect(-sceneWidth/2, -50, sceneWidth, sceneHeight);

    drawDateNode(root, 0, 80, sceneWidth * 0.3, 1);
}

void MainWindow::drawDateNode(AVLNode<std::string, Appointment, Array<Appointment, 1000>>* node,
                              qreal x, qreal y, qreal horizontalSpacing, int level) {
    if (!node) return;

    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    std::vector<std::size_t> indices;
    lNode* current = node->indexList.getHead();
    if (current) {
        do {
            indices.push_back(current->arrayIndex);
            current = current->next;
        } while (current != node->indexList.getHead());
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    Date date = stringToDate(node->key);
    QString displayDate = QString("%1.%2.%3")
                              .arg(date.day, 2, 10, QChar('0'))
                              .arg(static_cast<int>(date.month), 2, 10, QChar('0'))
                              .arg(date.year);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º std::string –≤ QString
    QString dateKey = QString::fromStdString(node->key);

    // –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–ª—è –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç
    DateTreeNodeItem* nodeItem = new DateTreeNodeItem(displayDate, dateKey, indices, &hashTable, x, y);
    treeScene->addItem(nodeItem);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ QGraphicsItem*, –∞ –Ω–µ –≤ –≤–µ–∫—Ç–æ—Ä treeNodes
    // treeNodes.push_back(nodeItem);  // ‚Üê –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –≠–¢–£ –°–¢–†–û–ö–£

    // –†–∏—Å—É–µ–º —Å–≤—è–∑–∏ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —É–∑–ª–∞–º–∏
    qreal childSpacing = horizontalSpacing / 2;
    qreal childY = y + 100;

    if (node->left) {
        qreal leftX = x - horizontalSpacing;
        QGraphicsLineItem* leftLine = treeScene->addLine(x, y + 20, leftX, childY - 20,
                                                         QPen(QColor(100, 100, 100), 2));
        drawDateNode(node->left, leftX, childY, childSpacing, level + 1);
    }

    if (node->right) {
        qreal rightX = x + horizontalSpacing;
        QGraphicsLineItem* rightLine = treeScene->addLine(x, y + 20, rightX, childY - 20,
                                                          QPen(QColor(100, 100, 100), 2));
        drawDateNode(node->right, rightX, childY, childSpacing, level + 1);
    }
}

void MainWindow::showEmptyTreeMessage(const QString& message) {
    QGraphicsTextItem* emptyText = treeScene->addText(message, QFont("Arial", 16));
    emptyText->setPos(-150, -20);
    emptyText->setDefaultTextColor(QColor(128, 128, 128));
}

void MainWindow::generateReport() {
    qDebug().noquote() << "=== –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê ===";

    reportTable->clearContents();
    reportTable->setRowCount(0);

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–∞ - –í–°–ï –ü–û–õ–Ø –∏–∑ –æ–±–æ–∏—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
    reportTable->setColumnCount(10);
    reportTable->setHorizontalHeaderLabels({
        "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞",           // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 2
        "–í—Ä–∞—á",                  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 2
        "–î–∏–∞–≥–Ω–æ–∑",              // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 2
        "–ü–æ–ª–∏—Å –û–ú–°",            // –°–≤—è–∑—å
        "–§–∞–º–∏–ª–∏—è",              // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 1
        "–ò–º—è",                  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 1
        "–û—Ç—á–µ—Å—Ç–≤–æ",             // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 1
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",        // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ 1
        "–ò–Ω–¥–µ–∫—Å –ø—Ä–∏—ë–º–∞",        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
        "–°—Ç–∞—Ç—É—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞"       // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    QString fioText = fioFilterEdit->text().trimmed();
    QString doctorText = doctorFilterEdit->text().trimmed();
    QDate qdate = dateFilterEdit->date();

    std::string fioFilter = fioText.toStdString();
    std::string doctorFilter = doctorText.toStdString();
    Date filterDate = {qdate.day(), static_cast<Month>(qdate.month()), qdate.year()};

    qDebug().noquote() << QString("–§–∏–ª—å—Ç—Ä—ã: –§–ò–û='%1', –í—Ä–∞—á='%2', –î–∞—Ç–∞=%3.%4.%5")
                              .arg(fioText)
                              .arg(doctorText)
                              .arg(filterDate.day)
                              .arg(static_cast<int>(filterDate.month))
                              .arg(filterDate.year);

    // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
    buildDateTreeForReport();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    std::vector<FullReportRecord> reportData = generateFullReportData(fioFilter, doctorFilter, filterDate);

    qDebug().noquote() << QString("–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞: %1").arg(reportData.size());

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (const auto& record : reportData) {
        int row = reportTable->rowCount();
        reportTable->insertRow(row);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        reportTable->setItem(row, 0, new QTableWidgetItem(formatDate(record.appointmentDate)));
        reportTable->setItem(row, 1, new QTableWidgetItem(QString::fromStdString(record.doctorType)));
        reportTable->setItem(row, 2, new QTableWidgetItem(QString::fromStdString(record.diagnosis)));
        reportTable->setItem(row, 3, new QTableWidgetItem(QString::fromStdString(record.patientPolicy)));
        reportTable->setItem(row, 4, new QTableWidgetItem(QString::fromStdString(record.patientSurname)));
        reportTable->setItem(row, 5, new QTableWidgetItem(QString::fromStdString(record.patientName)));
        reportTable->setItem(row, 6, new QTableWidgetItem(QString::fromStdString(record.patientMiddlename)));
        reportTable->setItem(row, 7, new QTableWidgetItem(formatDate(record.patientBirthDate)));
        reportTable->setItem(row, 8, new QTableWidgetItem(QString::number(record.appointmentIndex)));
        reportTable->setItem(row, 9, new QTableWidgetItem(record.patientFound ? "–û–ö" : "–ù–ï –ù–ê–ô–î–ï–ù"));

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ –≥–¥–µ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!record.patientFound) {
            for (int col = 0; col < reportTable->columnCount(); ++col) {
                reportTable->item(row, col)->setBackground(QColor(255, 200, 200)); // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç—á–µ—Ç–∞
    tabWidget->setCurrentIndex(2);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    QString message;
    if (reportData.empty()) {
        message = "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                  "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                  "- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –§–ò–û (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)\n"
                  "- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –≤—Ä–∞—á–∞\n"
                  "- –ù–∞–ª–∏—á–∏–µ –ø—Ä–∏—ë–º–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É";
        QMessageBox::information(this, "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", message);
    } else {
        int validRecords = 0;
        int invalidRecords = 0;
        for (const auto& record : reportData) {
            if (record.patientFound) validRecords++;
            else invalidRecords++;
        }

        message = QString("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç:\n"
                          "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %1\n"
                          "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: %2\n"
                          "–° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: %3")
                      .arg(reportData.size())
                      .arg(validRecords)
                      .arg(invalidRecords);

        QMessageBox::information(this, "–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤", message);

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç
        QString savePath = QFileDialog::getSaveFileName(this,
                                                        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª", "", "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)");

        if (!savePath.isEmpty()) {
            saveFullReportToFile(savePath, reportData);
        }
    }
}

void MainWindow::showSplitSearchDialog() {
    QDialog* dialog = new QDialog(this);
    dialog->setWindowTitle("–†–∞–∑–¥–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫");
    dialog->resize(800, 500);

    QVBoxLayout* layout = new QVBoxLayout(dialog);

    // –ü–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    QLineEdit* policyEdit1 = new QLineEdit();
    policyEdit1->setPlaceholderText("–ü–æ–ª–∏—Å –û–ú–° –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞");

    QTableWidget* patientResult = new QTableWidget();
    patientResult->setColumnCount(3);
    patientResult->setHorizontalHeaderLabels({"–§–ò–û", "–ü–æ–ª–∏—Å", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"});
    patientResult->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    QPushButton* searchPatientBtn = new QPushButton("–ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞");
    QObject::connect(searchPatientBtn, &QPushButton::clicked, this, [=, this]() {
        patientResult->setRowCount(0);
        std::string policy = policyEdit1->text().trimmed().toStdString();
        const Patient* p = hashTable.get(policy);
        if (!p) {
            QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        patientResult->insertRow(0);
        patientResult->setItem(0, 0, new QTableWidgetItem(QString::fromStdString(p->surname + " " + p->name + " " + p->middlename)));
        patientResult->setItem(0, 1, new QTableWidgetItem(QString::fromStdString(policy)));
        patientResult->setItem(0, 2, new QTableWidgetItem(formatDate(p->birthDate)));
    });

    // –ü–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—ë–º–æ–≤
    QLineEdit* policyEdit2 = new QLineEdit();
    policyEdit2->setPlaceholderText("–ü–æ–ª–∏—Å –û–ú–° –¥–ª—è –ø—Ä–∏—ë–º–æ–≤");

    QTableWidget* appointmentResult = new QTableWidget();
    appointmentResult->setColumnCount(4);
    appointmentResult->setHorizontalHeaderLabels({"–î–∏–∞–≥–Ω–æ–∑", "–í—Ä–∞—á", "–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞", "–ò–Ω–¥–µ–∫—Å"});
    appointmentResult->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    QPushButton* searchAppointmentsBtn = new QPushButton("–ù–∞–π—Ç–∏ –ø—Ä–∏—ë–º—ã");
    QObject::connect(searchAppointmentsBtn, &QPushButton::clicked, this, [=, this]() {
        appointmentResult->setRowCount(0);
        std::string policy = policyEdit2->text().trimmed().toStdString();
        avlTree.traverseByKey(policy, [&](std::size_t index) {
            if (index >= AppointmentArray.Size()) return;
            const Appointment& a = AppointmentArray[index];
            int row = appointmentResult->rowCount();
            appointmentResult->insertRow(row);
            appointmentResult->setItem(row, 0, new QTableWidgetItem(QString::fromStdString(a.diagnosis)));
            appointmentResult->setItem(row, 1, new QTableWidgetItem(QString::fromStdString(a.doctorType)));
            appointmentResult->setItem(row, 2, new QTableWidgetItem(formatDate(a.appointmentDate)));
            appointmentResult->setItem(row, 3, new QTableWidgetItem(QString::number(index)));
        });
    });

    // –î–æ–±–∞–≤–∏–º –≤ –º–∞–∫–µ—Ç
    layout->addWidget(policyEdit1);
    layout->addWidget(searchPatientBtn);
    layout->addWidget(patientResult);
    layout->addSpacing(10);
    layout->addWidget(policyEdit2);
    layout->addWidget(searchAppointmentsBtn);
    layout->addWidget(appointmentResult);

    dialog->setLayout(layout);
    dialog->exec();
}




void MainWindow::showDebugWindow() {
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    auto hashStats = hashTable.getStatistics();
    auto treeStats = avlTree.getStatistics();

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–∏–∑–∏–π –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ
    int collisions = 0;
    int maxChainLength = 0;
    int emptySlots = 0;

    std::vector<int> chainLengths(hashTable.getSize(), 0);

    for (std::size_t i = 0; i < hashTable.getSize(); ++i) {
        const HashRecord& record = hashTable.getRecord(i);
        if (record.getStatus() == ::Status::Active) {  // –ò–°–ü–†–ê–í–õ–ï–ù–û
            // –í—ã—á–∏—Å–ª—è–µ–º, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —ç–ª–µ–º–µ–Ω—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
            std::size_t idealPos = hashTable.getHashValue(record.key);
            if (idealPos != i) {
                collisions++;
            }
        } else {
            emptySlots++;
        }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AVL-–¥–µ—Ä–µ–≤–∞
    std::vector<std::string> treeKeys = avlTree.getAllKeys();
    int totalAppointments = 0;
    int maxAppointmentsPerPolicy = 0;
    int minAppointmentsPerPolicy = INT_MAX;

    for (const auto& key : treeKeys) {
        int count = avlTree.getCountForKey(key);
        totalAppointments += count;
        maxAppointmentsPerPolicy = std::max(maxAppointmentsPerPolicy, count);
        minAppointmentsPerPolicy = std::min(minAppointmentsPerPolicy, count);
    }

    if (treeKeys.empty()) {
        minAppointmentsPerPolicy = 0;
    }

    double avgAppointmentsPerPolicy = treeKeys.empty() ? 0.0 :
                                          static_cast<double>(totalAppointments) / treeKeys.size();

    QString debug = QString(
                        "=== –ü–û–î–†–û–ë–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ===\n\n"

                        "–ú–ê–°–°–ò–í–´:\n"
                        "‚Ä¢ –ü–∞—Ü–∏–µ–Ω—Ç—ã: %1/%2 (%3% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)\n"
                        "‚Ä¢ –ü—Ä–∏—ë–º—ã: %4/%5 (%6% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)\n"
                        "‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: %7\n"
                        "‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–∏—ë–º–æ–≤: %8\n\n"

                        "–•–≠–®-–¢–ê–ë–õ–ò–¶–ê:\n"
                        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: %9 —Å–ª–æ—Ç–æ–≤\n"
                        "‚Ä¢ –ó–∞–Ω—è—Ç–æ: %10 (%11%)\n"
                        "‚Ä¢ –ü—É—Å—Ç–æ: %12 (%13%)\n"
                        "‚Ä¢ –ö–æ–ª–ª–∏–∑–∏–∏: %14\n"
                        "‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏: %15%\n\n"

                        "AVL-–î–ï–†–ï–í–û:\n"
                        "‚Ä¢ –£–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ: %16\n"
                        "‚Ä¢ –û–±—â–∏–π –æ–±—ä—ë–º –ø—Ä–∏—ë–º–æ–≤: %17\n"
                        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–∏—Å–æ–≤: %18\n"
                        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: %19\n"
                        "‚Ä¢ –ü—Ä–∏—ë–º–æ–≤ –Ω–∞ –ø–æ–ª–∏—Å (–º–∏–Ω/–º–∞–∫—Å/—Å—Ä–µ–¥): %20/%21/%.1f\n\n"

                        "–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –î–ï–†–ï–í–ê:\n"
                        "‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: %22\n"
                        "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %23%\n\n"

                        "–†–ï–§–ï–†–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–¨:\n"
                        "‚Ä¢ –°—Ç–∞—Ç—É—Å: %24\n"
                        "‚Ä¢ –ü—Ä–∏—ë–º–æ–≤ –±–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: %25\n"
                        "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: %26"
                        )
                        .arg(PatientArray.Size())                                    // 1
                        .arg(PatientArray.GetCapacity())                            // 2
                        .arg(PatientArray.Size() * 100.0 / PatientArray.GetCapacity(), 0, 'f', 1)  // 3
                        .arg(AppointmentArray.Size())                               // 4
                        .arg(AppointmentArray.GetCapacity())                        // 5
                        .arg(AppointmentArray.Size() * 100.0 / AppointmentArray.GetCapacity(), 0, 'f', 1)  // 6
                        .arg(PatientArray.GetCapacity() - PatientArray.Size())      // 7
                        .arg(AppointmentArray.GetCapacity() - AppointmentArray.Size())  // 8
                        .arg(hashStats.totalSlots)                                  // 9
                        .arg(hashStats.usedSlots)                                   // 10
                        .arg(hashStats.loadFactor * 100, 0, 'f', 1)               // 11
                        .arg(hashStats.emptySlots)                                  // 12
                        .arg(hashStats.emptySlots * 100.0 / hashStats.totalSlots, 0, 'f', 1)  // 13
                        .arg(collisions)                                            // 14
                        .arg(hashStats.loadFactor * 100, 0, 'f', 1)               // 15
                        .arg(treeStats.totalNodes)                                  // 16
                        .arg(treeStats.totalElements)                               // 17
                        .arg(treeStats.uniqueKeys)                                  // 18
                        .arg(treeStats.maxDepth)                                    // 19
                        .arg(minAppointmentsPerPolicy)                              // 20
                        .arg(maxAppointmentsPerPolicy)                              // 21
                        .arg(avgAppointmentsPerPolicy)                              // 22 (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è %.1f –≤—ã—à–µ)
                        .arg(treeStats.maxDepth <= std::log2(treeStats.totalNodes) + 2 ? "–•–æ—Ä–æ—à–∞—è" : "–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")  // 22
                        .arg(treeStats.totalNodes > 0 ? 100.0 * std::log2(treeStats.totalNodes) / treeStats.maxDepth : 100, 0, 'f', 1)  // 23
                        .arg("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")                                      // 24
                        .arg("–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...")                                   // 25
                        .arg(PatientArray.Size() >= treeKeys.size() ? "‚úì" : "‚ö†Ô∏è")  // 26
        ;

    // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    QDialog* debugDialog = new QDialog(this);
    debugDialog->setWindowTitle("–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞");
    debugDialog->resize(600, 500);

    QVBoxLayout* layout = new QVBoxLayout(debugDialog);
    QTextEdit* textEdit = new QTextEdit(debugDialog);
    textEdit->setPlainText(debug);
    textEdit->setReadOnly(true);
    textEdit->setFont(QFont("Courier", 9)); // –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è

    QPushButton* closeButton = new QPushButton("–ó–∞–∫—Ä—ã—Ç—å", debugDialog);
    connect(closeButton, &QPushButton::clicked, debugDialog, &QDialog::accept);

    layout->addWidget(textEdit);
    layout->addWidget(closeButton);

    debugDialog->exec();
    debugDialog->deleteLater();
}

bool MainWindow::validateAppointmentData(const std::string& policy, const Appointment& appointment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (!patientExists(policy)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                             QString("–ü–∞—Ü–∏–µ–Ω—Ç —Å –ø–æ–ª–∏—Å–æ–º %1 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n"
                                     "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
                                 .arg(QString::fromStdString(policy)));
        return false;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–∞
    if (!isValidStringField(appointment.doctorType) || !isValidStringField(appointment.diagnosis)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                             "–¢–∏–ø –≤—Ä–∞—á–∞ –∏ –¥–∏–∞–≥–Ω–æ–∑ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!");
        return false;
    }


    if (!isValidDate(appointment.appointmentDate)) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                             "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏—ë–º–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞!");
        return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –¥–≤–∞ –ø—Ä–∏—ë–º–∞ –∫ –æ–¥–Ω–æ–º—É –≤—Ä–∞—á—É –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
    bool duplicate = false;
    avlTree.traverseByKey(policy, [&](std::size_t index) {
        if (index >= AppointmentArray.Size()) return;

        const Appointment& existing = AppointmentArray[index];

        if (existing.doctorType == appointment.doctorType &&
            existing.appointmentDate == appointment.appointmentDate) {
            duplicate = true;
        }
    });

    if (duplicate) {
        QMessageBox::warning(nullptr, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                             "–ü–∞—Ü–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.");
        return false;
    }



    return true;


}
void MainWindow::checkReferentialIntegrity() {
    qDebug().noquote() << "=== –ü–†–û–í–ï–†–ö–ê –†–ï–§–ï–†–ï–ù–¶–ò–ê–õ–¨–ù–û–ô –¶–ï–õ–û–°–¢–ù–û–°–¢–ò ===";

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–∏—Å—ã –∏–∑ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã (–ø–∞—Ü–∏–µ–Ω—Ç—ã)
    std::vector<std::string> patientPolicies = hashTable.getAllPolicies();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª–∏—Å—ã –∏–∑ AVL-–¥–µ—Ä–µ–≤–∞ (–ø—Ä–∏—ë–º—ã)
    std::vector<std::string> appointmentPolicies = avlTree.getAllKeys();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏—ë–º—ã –±–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    std::vector<std::string> orphanedAppointments;
    for (const auto& policy : appointmentPolicies) {
        if (!hashTable.exists(policy)) {
            orphanedAppointments.push_back(policy);
        }
    }

    qDebug().noquote() << QString("–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: %1").arg(patientPolicies.size());
    qDebug().noquote() << QString("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–∏—Å–æ–≤ —Å –ø—Ä–∏—ë–º–∞–º–∏: %1").arg(appointmentPolicies.size());
    qDebug().noquote() << QString("–ü—Ä–∏—ë–º–æ–≤ –±–µ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏): %1")
                              .arg(orphanedAppointments.size());

    if (!orphanedAppointments.empty()) {
        qDebug().noquote() << "–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª–∏—Å—ã:";
        for (const auto& policy : orphanedAppointments) {
            qDebug().noquote() << QString("  - %1").arg(QString::fromStdString(policy));
        }
    }
}


bool MainWindow::isValidPolicy(const std::string& policy) const {
    if (policy.length() != 16) return false;

    for (char c : policy) {
        if (!std::isdigit(c)) return false;
    }

    return true;
}

void MainWindow::generateIntegrityReport() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    checkReferentialIntegrity();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã
    auto hashStats = hashTable.getStatistics();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞
    auto treeStats = avlTree.getStatistics();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞
    bool treeIntegrity = avlTree.validateIntegrity(AppointmentArray);

    QString report = QString(
                         "=== –û–¢–ß–Å–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´ ===\n\n"
                         "–•–≠–®-–¢–ê–ë–õ–ò–¶–ê (–ü–∞—Ü–∏–µ–Ω—Ç—ã):\n"
                         "‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: %1\n"
                         "‚Ä¢ –ó–∞–Ω—è—Ç–æ —Å–ª–æ—Ç–æ–≤: %2\n"
                         "‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ —Å–ª–æ—Ç–æ–≤: %3\n"
                         "‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏: %4%\n\n"

                         "AVL-–î–ï–†–ï–í–û (–ü—Ä–∏—ë–º—ã):\n"
                         "‚Ä¢ –£–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ: %5\n"
                         "‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏—ë–º–æ–≤: %6\n"
                         "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏—ë–º–∞–º–∏: %7\n"
                         "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: %8\n"
                         "‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %9\n\n"

                         "–ú–ê–°–°–ò–í–´:\n"
                         "‚Ä¢ –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: %10\n"
                         "‚Ä¢ –ü—Ä–∏—ë–º–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ: %11\n\n"

                         "–†–ï–§–ï–†–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–¨: %12"
                         )
                         .arg(hashStats.totalSlots)
                         .arg(hashStats.usedSlots)
                         .arg(hashStats.emptySlots)
                         .arg(hashStats.loadFactor * 100, 0, 'f', 1)
                         .arg(treeStats.totalNodes)
                         .arg(treeStats.totalElements)
                         .arg(treeStats.uniqueKeys)
                         .arg(treeStats.maxDepth)
                         .arg(treeIntegrity ? "–û–ö" : "–ù–ê–†–£–®–ï–ù–ê")
                         .arg(PatientArray.Size())
                         .arg(AppointmentArray.Size())
                         .arg("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...");

    QMessageBox::information(this, "–û—Ç—á—ë—Ç –æ —Å–∏—Å—Ç–µ–º–µ", report);
}

void MainWindow::updateAVLTreeTableView() {
    avlTreeTableView->setRowCount(0);

    qDebug().noquote() << "[updateAVLTreeTableView] –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã AVL-–¥–µ—Ä–µ–≤–∞";

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–æ–ª–∏—Å–∞–º
    std::map<std::string, std::vector<std::pair<Appointment, std::size_t>>> policyData;

    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    avlTree.traverse([&policyData](const Appointment& appointment, const std::string& policy) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏ –≤ –º–∞—Å—Å–∏–≤–µ
        std::size_t arrayIndex = 0;
        for (std::size_t i = 0; i < AppointmentArray.Size(); ++i) {
            if (AppointmentArray[i] == appointment) {
                arrayIndex = i;
                break;
            }
        }
        policyData[policy].push_back(std::make_pair(appointment, arrayIndex));
    }, AppointmentArray);

    // –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (const auto& [policy, appointments] : policyData) {
        int appointmentCount = appointments.size();

        // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
        QString patientInfo = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
        const Patient* patient = hashTable.get(policy);
        if (patient) {
            patientInfo = QString("%1 %2 %3")
            .arg(QString::fromStdString(patient->surname))
                .arg(QString::fromStdString(patient->name))
                .arg(QString::fromStdString(patient->middlename));
        }

        // –¶–≤–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–ª–∏—Å–∞–º
        QColor rowColor;
        std::hash<std::string> hasher;
        std::size_t hash = hasher(policy);
        int colorIndex = hash % 6;

        switch (colorIndex) {
        case 0: rowColor = QColor(255, 245, 245); break; // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
        case 1: rowColor = QColor(245, 255, 245); break; // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        case 2: rowColor = QColor(245, 245, 255); break; // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
        case 3: rowColor = QColor(255, 255, 245); break; // –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
        case 4: rowColor = QColor(255, 245, 255); break; // –°–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–π
        case 5: rowColor = QColor(245, 255, 255); break; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞
        for (const auto& [appointment, arrayIndex] : appointments) {
            int row = avlTreeTableView->rowCount();
            avlTreeTableView->insertRow(row);

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã —Å —è–≤–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Ü–≤–µ—Ç–æ–º
            QTableWidgetItem* policyItem = new QTableWidgetItem(QString::fromStdString(policy));
            QTableWidgetItem* countItem = new QTableWidgetItem(QString::number(appointmentCount));
            QTableWidgetItem* doctorItem = new QTableWidgetItem(QString::fromStdString(appointment.doctorType));
            QTableWidgetItem* diagnosisItem = new QTableWidgetItem(QString::fromStdString(appointment.diagnosis));
            QTableWidgetItem* dateItem = new QTableWidgetItem(formatDate(appointment.appointmentDate));
            QTableWidgetItem* indexItem = new QTableWidgetItem(QString::number(arrayIndex));

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            policyItem->setBackground(rowColor);
            countItem->setBackground(rowColor);
            doctorItem->setBackground(rowColor);
            diagnosisItem->setBackground(rowColor);
            dateItem->setBackground(rowColor);
            indexItem->setBackground(rowColor);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—á–µ—Ä–Ω—ã–π –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞)
            policyItem->setForeground(QColor(0, 0, 0));
            countItem->setForeground(QColor(0, 0, 0));
            doctorItem->setForeground(QColor(0, 0, 0));
            diagnosisItem->setForeground(QColor(0, 0, 0));
            dateItem->setForeground(QColor(0, 0, 0));
            indexItem->setForeground(QColor(0, 0, 0));

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
            avlTreeTableView->setItem(row, 0, policyItem);
            avlTreeTableView->setItem(row, 1, countItem);
            avlTreeTableView->setItem(row, 2, doctorItem);
            avlTreeTableView->setItem(row, 3, diagnosisItem);
            avlTreeTableView->setItem(row, 4, dateItem);
            avlTreeTableView->setItem(row, 5, indexItem);
        }
    }

    qDebug().noquote() << QString("[updateAVLTreeTableView] –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å—Ç—Ä–æ–∫: %1")
                              .arg(avlTreeTableView->rowCount());
}

bool MainWindow::patientExists(const std::string& policy) const {
    const Patient* patient = hashTable.get(policy);
    return patient != nullptr;
}


void MainWindow::deleteAllAppointmentsForPatient(const std::string& policy) {
    qDebug().noquote() << QString("=== –ö–ê–°–ö–ê–î–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ø—Ä–∏—ë–º–æ–≤ –¥–ª—è –ø–æ–ª–∏—Å–∞: %1 ===")
                              .arg(QString::fromStdString(policy));

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–∏—ë–º—ã —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª–∏—Å–æ–º –∏–∑ AVL-–¥–µ—Ä–µ–≤–∞
    if (avlTree.removeAllByKey(policy)) {
        qDebug().noquote() << "‚Üí –í—Å–µ –ø—Ä–∏—ë–º—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –¥–µ—Ä–µ–≤–∞";

        // –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–∞ appointmentPolicies
        auto it = appointmentPolicies.begin();
        while (it != appointmentPolicies.end()) {
            if (*it == policy) {
                it = appointmentPolicies.erase(it);
                qDebug().noquote() << "‚Üí –£–¥–∞–ª—ë–Ω –ø–æ–ª–∏—Å –∏–∑ –≤–µ–∫—Ç–æ—Ä–∞";
            } else {
                ++it;
            }
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –¥–∞—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        buildDateTreeForReport();
    } else {
        qDebug().noquote() << "‚Üí –ü—Ä–∏—ë–º—ã —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª–∏—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
    }
}



void MainWindow::clearTreeVisualization()
{
    treeScene->clear();
    treeNodes.clear();
}

void MainWindow::drawTree()
{
    auto root = avlTree.getRoot();
    if (!root) {
        // –ï—Å–ª–∏ –¥–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        QGraphicsTextItem* emptyText = treeScene->addText("–î–µ—Ä–µ–≤–æ –ø—É—Å—Ç–æ–µ", QFont("Arial", 16));
        emptyText->setPos(-100, -20);
        emptyText->setDefaultTextColor(QColor(128, 128, 128));
        return;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    int treeHeight = calculateTreeHeight(root);
    int treeWidth = calculateTreeWidth(root);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã
    int sceneWidth = std::max(800, treeWidth * 120);
    int sceneHeight = std::max(600, treeHeight * 100);
    treeScene->setSceneRect(-sceneWidth/2, -50, sceneWidth, sceneHeight);

    // –†–∏—Å—É–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
    drawNode(root, 0, 80, sceneWidth * 0.3, 1);

    qDebug().noquote() << QString("[drawTree] –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–æ —É–∑–ª–æ–≤: %1").arg(treeNodes.size());
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–µ—Ä–µ–≤–∞:
int MainWindow::calculateTreeHeight(AVLNode<std::string, Appointment, Array<Appointment, 1000>>* node)
{
    if (!node) return 0;
    return 1 + std::max(calculateTreeHeight(node->left), calculateTreeHeight(node->right));
}

int MainWindow::calculateTreeWidth(AVLNode<std::string, Appointment, Array<Appointment, 1000>>* node)
{
    if (!node) return 0;
    return 1 + calculateTreeWidth(node->left) + calculateTreeWidth(node->right);
}

void MainWindow::drawNode(AVLNode<std::string, Appointment, Array<Appointment, 1000>>* node,
                          qreal x, qreal y, qreal horizontalSpacing, int level)
{
    if (!node) return;

    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    std::vector<std::size_t> indices;
    lNode* current = node->indexList.getHead();
    if (current) {
        do {
            indices.push_back(current->arrayIndex);
            current = current->next;
        } while (current != node->indexList.getHead());
    }

    // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª
    QString keyText = QString::fromStdString(node->key);

    // –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–ª–∏—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
    if (keyText.length() > 8) {
        keyText = "..." + keyText.right(4);
    }

    TreeNodeItem* nodeItem = new TreeNodeItem(QString::fromStdString(node->key), indices, &hashTable, x, y);
    treeScene->addItem(nodeItem);
    treeNodes.push_back(nodeItem);

    // –†–∏—Å—É–µ–º —Å–≤—è–∑–∏ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —É–∑–ª–∞–º–∏
    qreal childSpacing = horizontalSpacing / 2;
    qreal childY = y + 100;

    if (node->left) {
        qreal leftX = x - horizontalSpacing;

        // –õ–∏–Ω–∏—è –∫ –ª–µ–≤–æ–º—É –ø–æ—Ç–æ–º–∫—É
        QGraphicsLineItem* leftLine = treeScene->addLine(x, y + 20, leftX, childY - 20,
                                                         QPen(QColor(100, 100, 100), 2));

        drawNode(node->left, leftX, childY, childSpacing, level + 1);
    }

    if (node->right) {
        qreal rightX = x + horizontalSpacing;

        // –õ–∏–Ω–∏—è –∫ –ø—Ä–∞–≤–æ–º—É –ø–æ—Ç–æ–º–∫—É
        QGraphicsLineItem* rightLine = treeScene->addLine(x, y + 20, rightX, childY - 20,
                                                          QPen(QColor(100, 100, 100), 2));

        drawNode(node->right, rightX, childY, childSpacing, level + 1);
    }
}

std::string MainWindow::dateToString(const Date& date) {
    return QString("%1%2%3")
    .arg(date.year, 4, 10, QChar('0'))
        .arg(static_cast<int>(date.month), 2, 10, QChar('0'))
        .arg(date.day, 2, 10, QChar('0'))
        .toStdString();
}

void MainWindow::buildDateTreeForReport() {
    qDebug().noquote() << "=== –ü–û–°–¢–†–û–ï–ù–ò–ï –î–ï–†–ï–í–ê –ü–û –î–ê–¢–ê–ú ===";

    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
    dateTree.clear();

    if (AppointmentArray.Size() == 0) {
        qDebug().noquote() << "‚Üí –ù–µ—Ç –ø—Ä–∏—ë–º–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç";
        return;
    }

    int addedCount = 0;
    std::set<std::string> uniqueDates;  // –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç

    for (std::size_t i = 0; i < AppointmentArray.Size(); ++i) {
        const Appointment& appointment = AppointmentArray[i];
        std::string dateKey = dateToString(appointment.appointmentDate);

        uniqueDates.insert(dateKey);

        if (dateTree.insertIndex(dateKey, i)) {
            addedCount++;
            qDebug().noquote() << QString("‚Üí [%1] %2: %3 —É %4")
                                      .arg(i)
                                      .arg(QString::fromStdString(dateKey))
                                      .arg(QString::fromStdString(appointment.diagnosis))
                                      .arg(QString::fromStdString(appointment.doctorType));
        } else {
            qDebug().noquote() << QString("‚úó –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ %1 –¥–ª—è –¥–∞—Ç—ã %2")
                                      .arg(i)
                                      .arg(QString::fromStdString(dateKey));
        }
    }

    qDebug().noquote() << QString("–†–µ–∑—É–ª—å—Ç–∞—Ç: %1 –ø—Ä–∏—ë–º–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ, %2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç")
                              .arg(addedCount)
                              .arg(uniqueDates.size());

    auto root = dateTree.getRoot();
    if (root) {
        qDebug().noquote() << "‚úì –ö–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω";
    } else {
        qDebug().noquote() << "‚úó –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –¥–∞—Ç –ù–ï —Å–æ–∑–¥–∞–Ω!";
    }
}

std::vector<MainWindow::FullReportRecord> MainWindow::generateFullReportData(
    const std::string& fioFilter,
    const std::string& doctorFilter,
    const Date& dateFilter) {

    std::vector<FullReportRecord> results;
    std::string dateKey = dateToString(dateFilter);

    qDebug().noquote() << QString("–ü–æ–∏—Å–∫ –≤ –¥–µ—Ä–µ–≤–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ: %1")
                              .arg(QString::fromStdString(dateKey));

    // –ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É –¥–∞—Ç
    dateTree.traverseFiltered(
        [&](const Appointment& appointment) -> bool {
            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–ª—é—á–æ–º)
            if (dateToString(appointment.appointmentDate) != dateKey) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–∞—á—É
            if (!doctorFilter.empty() && appointment.doctorType != doctorFilter) {
                return false;
            }

            return true; // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –§–ò–û –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
        },
        [&](const Appointment& appointment) {
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏—ë–º–∞ –≤ –º–∞—Å—Å–∏–≤–µ
            std::size_t appointmentIndex = SIZE_MAX;
            for (std::size_t i = 0; i < AppointmentArray.Size(); ++i) {
                if (AppointmentArray[i] == appointment) {
                    appointmentIndex = i;
                    break;
                }
            }

            if (appointmentIndex == SIZE_MAX || appointmentIndex >= appointmentPolicies.size()) {
                qDebug().noquote() << "–ù–µ –Ω–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–∏—ë–º–∞";
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏—ë–º–∞
            std::string policy = appointmentPolicies[appointmentIndex];

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ 1
            const Patient* patient = hashTable.get(policy);

            FullReportRecord record;
            record.appointmentIndex = appointmentIndex;
            record.doctorType = appointment.doctorType;
            record.diagnosis = appointment.diagnosis;
            record.appointmentDate = appointment.appointmentDate;
            record.patientPolicy = policy;

            if (patient) {
                record.patientSurname = patient->surname;
                record.patientName = patient->name;
                record.patientMiddlename = patient->middlename;
                record.patientBirthDate = patient->birthDate;
                record.patientFound = true;

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –§–ò–û –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if (!fioFilter.empty()) {
                    std::string fullFIO = patient->surname + " " + patient->name + " " + patient->middlename;
                    if (fullFIO != fioFilter) {
                        return; // –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –§–ò–û
                    }
                }
            } else {
                record.patientSurname = "–ù–ï";
                record.patientName = "–ù–ê–ô–î–ï–ù";
                record.patientMiddlename = "";
                record.patientBirthDate = {1, Month::—è–Ω–≤, 1900};
                record.patientFound = false;

                // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –§–ò–û –∑–∞–¥–∞–Ω, –∞ –ø–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if (!fioFilter.empty()) {
                    return;
                }
            }

            results.push_back(record);

            qDebug().noquote() << QString("‚úì –î–æ–±–∞–≤–ª–µ–Ω: %1 %2 %3 ‚Üí %4 —É %5")
                                      .arg(QString::fromStdString(record.patientSurname))
                                      .arg(QString::fromStdString(record.patientName))
                                      .arg(QString::fromStdString(record.patientMiddlename))
                                      .arg(QString::fromStdString(record.diagnosis))
                                      .arg(QString::fromStdString(record.doctorType));
        },
        AppointmentArray
        );

    return results;
}

void MainWindow::showIntegrityReport() {
    generateIntegrityReport();
}
