#ifndef PATIENTPARSER_H
#define PATIENTPARSER_H
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm>
#include <QDebug>
#include "types.h"
#include "array.h"

// üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç "—è–Ω–≤" ‚Üí Month::—è–Ω–≤
Month parseMonth(const std::string& m) {
    if (m == "—è–Ω–≤") return Month::—è–Ω–≤;
    if (m == "—Ñ–µ–≤") return Month::—Ñ–µ–≤;
    if (m == "–º–∞—Ä") return Month::–º–∞—Ä;
    if (m == "–∞–ø—Ä") return Month::–∞–ø—Ä;
    if (m == "–º–∞–π") return Month::–º–∞–π;
    if (m == "–∏—é–Ω") return Month::–∏—é–Ω;
    if (m == "–∏—é–ª") return Month::–∏—é–ª;
    if (m == "–∞–≤–≥") return Month::–∞–≤–≥;
    if (m == "—Å–µ–Ω") return Month::—Å–µ–Ω;
    if (m == "–æ–∫—Ç") return Month::–æ–∫—Ç;
    if (m == "–Ω–æ—è") return Month::–Ω–æ—è;
    if (m == "–¥–µ–∫") return Month::–¥–µ–∫;
    throw std::invalid_argument("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: " + m);
}

// üßπ –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã
std::string removeSpaces(const std::string& str) {
    std::string res = str;
    res.erase(std::remove(res.begin(), res.end(), ' '), res.end());
    return res;
}

// üìÑ –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
bool parsePatientFile(const std::string& filename, Array<Patient, 1000>& patientArray) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        qDebug() << "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:" << QString::fromStdString(filename);
        return false;
    }

    std::string line;
    int lineNumber = 0;

    while (std::getline(file, line)) {
        ++lineNumber;
        std::istringstream iss(line);
        std::string policyRaw, surname, name, middlename, dayStr, monthStr, yearStr;

        // –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        // 1234 5678 9012 3456, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 12 —Ñ–µ–≤ 2003
        if (!std::getline(iss, policyRaw, ',')) continue;
        if (!std::getline(iss, surname, ' ')) continue;
        if (!std::getline(iss, name, ' ')) continue;
        if (!std::getline(iss, middlename, ',')) continue;
        if (!(iss >> dayStr >> monthStr >> yearStr)) continue;

        try {
            Patient p;
            p.name = trim(name);
            p.surname = trim(surname);
            p.middlename = trim(middlename);
            p.birthDate = {
                std::stoi(dayStr),
                parseMonth(trim(monthStr)),
                std::stoi(yearStr)
            };

            std::string cleanPolicy = removeSpaces(trim(policyRaw));
            if (cleanPolicy.size() != 16) {
                qDebug() << "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª–∏—Å –û–ú–° –Ω–∞ —Å—Ç—Ä–æ–∫–µ" << lineNumber;
                continue;
            }

            // –í—Å—Ç–∞–≤–∫–∞ –≤ –º–∞—Å—Å–∏–≤
            if (!patientArray.Add(p)) {
                qDebug() << "–ú–∞—Å—Å–∏–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω!";
                return false;
            }

            qDebug().noquote() << QString("–ó–∞–≥—Ä—É–∂–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç [%1 %2 %3], –ø–æ–ª–∏—Å: %4")
                                      .arg(QString::fromStdString(p.surname))
                                      .arg(QString::fromStdString(p.name))
                                      .arg(QString::fromStdString(p.middlename))
                                      .arg(QString::fromStdString(cleanPolicy));
        } catch (...) {
            qDebug() << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏" << lineNumber << ":" << QString::fromStdString(line);
            continue;
        }
    }

    return true;
}

// –£–¥–∞–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ/–∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
std::string trim(const std::string& str) {
    const auto begin = str.find_first_not_of(" \t");
    if (begin == std::string::npos) return "";
    const auto end = str.find_last_not_of(" \t");
    return str.substr(begin, end - begin + 1);
}


#endif // PATIENTPARSER_H
